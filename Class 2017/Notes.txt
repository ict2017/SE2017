SYSCALL				$v0
print int			1
print string		4
read string			8
print character		11
use $a0

print float			2
print double		3
use $f12

read int			5
read character		12
use $v0

read float			6
read double			7
use $f0

load immediate:
li	register_destination, value 	#load immediate value into destination register
load address:
la	$t0, var1						copy RAM address of var1 (presumably a label defined in the program) into register $t0

lw	$t2, ($t0)
load word at RAM address contained in $t0 into $t2
sw	$t2, ($t0)
store word in register $t2 into RAM at address contained in $t0

lw	$t2, 4($t0)
load word at RAM address ($t0+4) into register $t2
"4" gives offset from address in register $t0
sw	$t2, -12($t0)
store word in register $t2 into RAM at address ($t0 - 12)
negative offsets are fine

addi	$t2,$t3, 5	#  $t2 = $t3 + 5;   add immediate
subi	$t1,$t6, 7	#  $t1 = $t6 - 7; subtract immediate
move	$t2,$t3		#  $t2 = $t3

beq	$t0,$t1,target	#  branch to target if  $t0 = $t1
blt	$t0,$t1,target	#  branch to target if  $t0 < $t1
ble	$t0,$t1,target	#  branch to target if  $t0 <= $t1
bgt	$t0,$t1,target	#  branch to target if  $t0 > $t1
bge	$t0,$t1,target	#  branch to target if  $t0 >= $t1
bne	$t0,$t1,target	#  branch to target if  $t0 <> $t1

j	target	#  unconditional jump to program label target
jr	$t3		#  jump to address contained in $t3 ("jump register")

subroutine call: "jump and link" instruction
jal	sub_label	#  "jump and link"
copy program counter (return address) to register $ra (return address register)
jump to program statement at sub_label
subroutine return: "jump register" instruction
jr	$ra	#  "jump register"
jump to return address in $ra (stored by jal instruction)



